// Code generated by MockGen. DO NOT EDIT.
// Source: http.go
//
// Generated by this command:
//
//	mockgen -source=http.go -destination=mocks/mock.go
//

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	reflect "reflect"

	core "github.com/Prokopevs/ccc/auth/internal/core"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockService) GetUserInfo(arg0 context.Context, arg1 string, arg2 int) (*core.UserInfo, core.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*core.UserInfo)
	ret1, _ := ret[1].(core.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockServiceMockRecorder) GetUserInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockService)(nil).GetUserInfo), arg0, arg1, arg2)
}

// GetUserReferrals mocks base method.
func (m *MockService) GetUserReferrals(arg0 context.Context, arg1 int) ([]*core.UserReferrals, core.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReferrals", arg0, arg1)
	ret0, _ := ret[0].([]*core.UserReferrals)
	ret1, _ := ret[1].(core.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserReferrals indicates an expected call of GetUserReferrals.
func (mr *MockServiceMockRecorder) GetUserReferrals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReferrals", reflect.TypeOf((*MockService)(nil).GetUserReferrals), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockService) GetUsers(arg0 context.Context) ([]*core.User, core.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]*core.User)
	ret1, _ := ret[1].(core.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockServiceMockRecorder) GetUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockService)(nil).GetUsers), arg0)
}
